/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
@-webkit-keyframes flipX {
  0% {
    opacity: 0;
    -webkit-transform: perspective(400px) translateZ(0) rotateY(0) scale(1);
    transform: perspective(400px) translateZ(0) rotateY(0) scale(1);
  }
  100% {
    opacity: 1;
    -webkit-transform: perspective(400px) translateZ(0) rotateY(180deg) scale(1);
    transform: perspective(400px) translateZ(0) rotateY(180deg) scale(1);
  }
}
@keyframes flipX {
  0% {
    opacity: 0;
    -webkit-transform: perspective(400px) translateZ(0) rotateY(0) scale(1);
    transform: perspective(400px) translateZ(0) rotateY(0) scale(1);
  }
  100% {
    opacity: 1;
    -webkit-transform: perspective(400px) translateZ(0) rotateY(180deg) scale(1);
    transform: perspective(400px) translateZ(0) rotateY(180deg) scale(1);
  }
}
.eePageWrap {
  position: relative;
}

.eeContainer {
  max-width: 1024px;
  margin: 0 auto;
}

.eeCode {
  position: absolute;
  display: block;
  font-size: 40px;
  opacity: 0.5;
  font-family: "Arvo", serif;
}
.eeCode.html {
  color: #282621;
  top: 10%;
  left: 15%;
}
.eeCode.css {
  color: #4EC3C8;
  top: 10%;
  right: 15%;
}
.eeCode.jquery {
  color: #282621;
  top: 35%;
  right: 10%;
}
.eeCode.javascript {
  color: #4EC3C8;
  top: 35%;
  left: 10%;
}
.eeCode.php {
  color: #282621;
  top: 55%;
  left: 15%;
}
.eeCode.mysql {
  color: #4EC3C8;
  top: 55%;
  right: 15%;
}
.eeCode.sass {
  color: #282621;
  top: 75%;
  right: 20%;
}
.eeCode.java {
  color: #4EC3C8;
  top: 75%;
  left: 20%;
}

header {
  padding: 60px 0 30px;
}
header .eeLogo {
  display: block;
  width: 251px;
  height: auto;
  margin: 0 auto;
  text-decoration: none;
}
header .eeLogo img {
  display: block;
  margin-bottom: 15px;
}
header .eeLogo p {
  text-align: center;
  text-transform: uppercase;
  text-align: center;
  font-weight: bold;
}
header .eeLogo p span {
  font: inherit;
}

.eeDefaultWrap.eeSocial {
  text-align: center;
  padding: 60px 0;
}
.eeDefaultWrap.eeSocial ul {
  display: inline-block;
}
.eeDefaultWrap.eeSocial ul li {
  float: left;
  margin-left: 25px;
}
.eeDefaultWrap.eeSocial ul li:first-child {
  margin-left: 0;
}
.eeDefaultWrap.eeSocial ul li a {
  display: block;
}
.eeDefaultWrap.eeSocial ul li a i {
  font-family: FontAwesome;
  font-size: 50px;
  color: #282621;
  transition: all 0.8s;
}
.eeDefaultWrap.eeSocial ul li a:hover i {
  color: #4EC3C8;
  transform: scale(1.2);
}

footer {
  padding: 30px 0;
  background-color: #282621;
  position: fixed;
  bottom: 0;
  width: 100%;
  text-align: center;
}
footer p {
  color: #4EC3C8;
}
